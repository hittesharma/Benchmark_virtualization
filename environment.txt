==========================================================
============== Experiment host ===========================
==========================================================
Google Cloud Engine 
n1-standard-2
with enabled nested virtualization
Standard machine type with 2 vCPUs and 7.5 GB RAM
Disk 40 GB SSD
ubuntu-18.04 image
europe-west3-c availability zone
==========================================================
==========================================================
==========================================================


==========================================================
============== Relevant Package Versions =================
==========================================================
docker-ce               5:19.03.5~3-0~ub
gcc                     4:7.4.0-1ubuntu2
iperf3                  3.1.3-1
qemu                    1:2.11+dfsg-1ubun
sysbench                1.0.11+ds-1
ubuntu-kernel           5.0.0-1026-gcp
==========================================================
==========================================================
==========================================================


==========================================================
============== Detailed CPU & RAM ========================
==========================================================
CPU model:           x86_64
CPU(s):              2
CPU frequency:       2200 MHz
CPU socket(s):       1
Core(s) per socket:  1
Thread(s) per core:  2
NUMA cell(s):        1
Memory size:         7649812 Ki
==========================================================
==========================================================
==========================================================

VM Image for ubuntu retrieved from: https://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-amd64.img at the 08.12.2020


The machine is prepared byâ€¦

==========================================================
0) installing basic software
==========================================================

sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get install -y \
   bc \
   gcc \
   make \
   sysbench \
   iperf3

==========================================================
1) installing Docker
==========================================================

#sudo apt-get update
#sudo apt-get upgrade -y

sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    net-tools \
    software-properties-common -y

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
#sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io -y

sudo apt-get install python-pip -y
sudo pip install --upgrade pip
sudo pip install docker-compose

sudo docker run --rm hello-world


==========================================================
2) installing KVM and qemu and testing the ssh connection
===========================================================

RSA_PRIVATE_PATH=~/.ssh/id_rsa
UBUNTU_VERSION_CODENAME=$(lsb_release -cs)
CPU_CORE_NUM=$(cat /proc/cpuinfo | grep processor | wc -l)
RAM_IN_MB=2048

echo "If the following number is greater than 0 hardware virtualization is suppport: $(egrep -c '(vmx|svm)' /proc/cpuinfo)"

sudo apt-get install -y qemu qemu-kvm libvirt-bin uvtool virt-manager #bridge-utils 

# Check that kvm is enabled & libvirt is working as expected
		
service libvirtd status
sudo virsh net-list --all 	
sudo virsh -c qemu:///system nodeinfo


ssh-keygen -N "" -f ~/.ssh/id_rsa

mkdir ./kvm
mkdir ./qemu

echo 'instance-id: kvm-cc20
hostname: kvm-cc20
local-hostname: kvm-cc20' > ./kvm/meta-data
echo 'instance-id: qemu-cc20
hostname: qemu-cc20
local-hostname: qemu-cc20' > ./qemu/meta-data
echo "#cloud-config
ssh_authorized_keys:
  - $(cat ~/.ssh/id_rsa.pub)" > ./kvm/user-data
echo "#cloud-config
ssh_authorized_keys:
  - $(cat ~/.ssh/id_rsa.pub)" > ./qemu/user-data

current_dir=$(pwd)

cd ./kvm
sudo genisoimage -o /var/lib/libvirt/images/kvm-cc20-init.iso -V cidata -r -J user-data meta-data

cd $current_dir
cd ./qemu
sudo genisoimage -o /var/lib/libvirt/images/qemu-cc20-init.iso -V cidata -r -J user-data meta-data

wget -O /tmp/ubuntu18.qcow2 https://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-amd64.img

sudo mv /tmp/ubuntu18.qcow2 /var/lib/libvirt/images/ubuntu18-base.qcow2
sudo chown root:root /var/lib/libvirt/images/ubuntu18-base.qcow2

sudo qemu-img create -f qcow2 \
        -o backing_file=/var/lib/libvirt/images/ubuntu18-base.qcow2 \
        /var/lib/libvirt/images/kvm-cc20.qcow2
sudo qemu-img resize /var/lib/libvirt/images/kvm-cc20.qcow2 5G

sudo virt-install --connect qemu:///system \
         -n kvm-cc20 \
         -r $RAM_IN_MB \
         --vcpus=$CPU_CORE_NUM \
         --network network=default \
         --disk path=/var/lib/libvirt/images/kvm-cc20.qcow2 \
         --disk path=/var/lib/libvirt/images/kvm-cc20-init.iso,device=cdrom \
         --os-type linux \
         --os-variant ubuntu18.04 \
         --virt-type kvm \
         --nographics \
         --import \
         --noautoconsole

sudo qemu-img create -f qcow2 \
        -o backing_file=/var/lib/libvirt/images/ubuntu18-base.qcow2 \
        /var/lib/libvirt/images/qemu-cc20.qcow2
sudo qemu-img resize /var/lib/libvirt/images/qemu-cc20.qcow2 5G

sudo virt-install --connect qemu:///system \
         -n qemu-cc20 \
         -r $RAM_IN_MB \
         --vcpus=$CPU_CORE_NUM \
         --network network=default \
         --disk path=/var/lib/libvirt/images/qemu-cc20.qcow2 \
         --disk path=/var/lib/libvirt/images/qemu-cc20-init.iso,device=cdrom \
         --os-type linux \
         --os-variant ubuntu18.04 \
         --virt-type qemu \
         --nographics \
         --import \
         --noautoconsole

sudo virsh net-dhcp-leases default

ssh -i $RSA_PRIVATE_PATH ubuntu@$VM_IP echo 'We are in the VM!'